using System.Collections.Generic;
using System.Linq;
using UnityEngine;





/// <summary>
/// –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á: –¥–æ—Å—Ç–∞–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (Haul) –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ (Build).
/// </summary>
[DefaultExecutionOrder(-1000)] // üîë –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–Ω—å—à–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
public class JobManager : MonoBehaviour
{
    public static JobManager Instance { get; private set; }

    void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }
        Instance = this;
        DontDestroyOnLoad(gameObject); // üîë –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º —Å–º–µ–Ω—É —Å—Ü–µ–Ω
        Debug.Log("[JobManager] Ready.");
    }

    // ---------- –ú–û–î–ï–õ–ò –ó–ê–î–ê–ß ----------

    public class HaulJob
    {
        public BuildSite Site;
        public ResourceDef Resource;
        public int RequestedAmount;  // —Å–∫–æ–ª—å–∫–æ –µ—â—ë –Ω—É–∂–Ω–æ –¥–æ–≤–µ–∑—Ç–∏ (–±–µ–∑ inTransit)
        public int InTransit;        // —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ/–≤ –ø—É—Ç–∏
        public int ChunkSize = 15;

        /// <summary>–†–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç –ø–æ—Ä—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç InTransit, —É–º–µ–Ω—å—à–∞–µ—Ç RequestedAmount).</summary>
        public int ReserveChunk(int maxByCapacity)
        {
            int remain = Mathf.Max(0, RequestedAmount);
            if (remain <= 0) return 0;

            int take = Mathf.Min(remain, Mathf.Max(1, Mathf.Min(ChunkSize, maxByCapacity)));
            RequestedAmount -= take;
            InTransit += take;
            return take;
        }

        /// <summary>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É —á–∞—Å—Ç–∏ –≥—Ä—É–∑–∞: —É–º–µ–Ω—å—à–∞–µ—Ç InTransit.</summary>
        public void CompleteChunk(int delivered)
        {
            if (delivered <= 0) return;
            InTransit = Mathf.Max(0, InTransit - delivered);
        }

        /// <summary>–û—Ç–º–µ–Ω–∏—Ç—å "–∑–∞–≤–∏—Å—à–∏–π" –≤ –ø—É—Ç–∏ –≥—Ä—É–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–±–æ—á–∏–π –≤–µ—Ä–Ω—É–ª –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥).</summary>
        public void CancelInTransit(int amount)
        {
            if (amount <= 0) return;
            InTransit = Mathf.Max(0, InTransit - amount);
        }
    }

    public class BuildJob
    {
        public BuildSite Site;
    }

    // ---------- –•–†–ê–ù–ò–õ–ò–©–ï –ó–ê–î–ê–ß ----------

    // –∫–ª—é—á: (Site, Resource)
    private readonly Dictionary<(BuildSite, ResourceDef), HaulJob> _haul = new();

    // –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–ª–æ—â–∞–¥–æ–∫ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π Build‚Äë—Ä–∞–±–æ—Ç–æ–π
    private readonly HashSet<BuildSite> _buildSites = new();

    // ---------- –ü–£–ë–õ–ò–ß–ù–û–ï API ----------

    /// <summary>–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ Haul‚Äë–∑–∞–¥–∞—á–∏. amount = —Å–∫–æ–ª—å–∫–æ –µ—â—ë –¥–æ–≤–µ–∑—Ç–∏.</summary>
    public void EnsureHaulJob(BuildSite site, ResourceDef res, int amount, int chunk = 15)
    {
        if (!site || !res) return;
        var key = (site, res);

        if (!_haul.TryGetValue(key, out var job))
        {
            job = new HaulJob { Site = site, Resource = res, RequestedAmount = 0, InTransit = 0, ChunkSize = chunk };
            _haul[key] = job;
        }

        // amount ‚Äî —ç—Ç–æ ¬´–∞–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç¬ª –Ω–∞ —Ç–∏–∫; –¥–µ—Ä–∂–∏–º RequestedAmount —Ä–∞–≤–Ω—ã–º –µ–º—É (–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è)
        job.ChunkSize = chunk;
        job.RequestedAmount = Mathf.Max(0, amount);
    }

    /// <summary>–°–Ω—è—Ç—å Haul‚Äë–∑–∞–¥–∞—á—É –ø–æ–ª–Ω–æ—Å—Ç—å—é.</summary>
    public void RemoveHaulJob(BuildSite site, ResourceDef res)
    {
        if (!site || !res) return;
        var key = (site, res);
        _haul.Remove(key);
    }

    /// <summary>–°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –ø–ª–æ—â–∞–¥–∫–∏ —Å–µ–π—á–∞—Å –≤ –ø—É—Ç–∏ (inTransit).</summary>
    public int GetInTransit(BuildSite site, ResourceDef res)
    {
        if (!site || !res) return 0;
        var key = (site, res);
        return _haul.TryGetValue(key, out var job) ? Mathf.Max(0, job.InTransit) : 0;
    }

    /// <summary>–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ.</summary>
    public bool TryGetNextHaulJob(WorkerAgent worker, out HaulJob job)
    {
        // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –ø–ª–æ—â–∞–¥–∫–∏ –∏ –≤–µ–ª–∏—á–∏–Ω–µ –æ—Å—Ç–∞—Ç–∫–∞
        var cand = _haul.Values
            .Where(j => j != null && j.Site != null && j.RequestedAmount > 0)
            .OrderByDescending(j => j.Site.Priority)
            .ThenBy(j => j.Site.DistanceToStorage)
            .ThenByDescending(j => j.RequestedAmount)
            .FirstOrDefault();

        if (cand != null)
        {
            job = cand;
            return true;
        }

        job = null;
        return false;
    }

    /// <summary>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –ø–æ –ø–ª–æ—â–∞–¥–∫–µ –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è Build‚Äë—Ä–∞–±–æ—Ç–∞.</summary>
    public void EnsureBuildJob(BuildSite site)
    {
        if (!site) return;
        _buildSites.Add(site);
    }

    /// <summary>–°–Ω—è—Ç—å Build‚Äë—Ä–∞–±–æ—Ç—É.</summary>
    public void RemoveBuildJob(BuildSite site)
    {
        if (!site) return;
        _buildSites.Remove(site);
    }

    /// <summary>–ï—Å—Ç—å –ª–∏ –ø–ª–æ—â–∞–¥–∫–∏, –≥–æ—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∏—Ç—å, —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏.</summary>
    public bool HasReadyBuildSites()
    {
        foreach (var s in _buildSites)
        {
            if (!s) continue;
            if (s.CanBuildNow() && s.HasFreeBuilderSlot()) return true;
        }
        return false;
    }

    /// <summary>–í—ã–¥–∞—Ç—å Build‚Äë–∑–∞–¥–∞—á—É: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–ª–æ—â–∞–¥–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã —Å—Ç—Ä–æ–∏—Ç—å –∏ –∏–º–µ—é—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç.</summary>
    public bool TryGetBuildJob(WorkerAgent worker, out BuildJob job)
    {
        foreach (var site in _buildSites)
        {
            if (!site) continue;
            if (!site.CanBuildNow()) continue;
            if (!site.HasFreeBuilderSlot()) continue;

            job = new BuildJob { Site = site };
            return true;
        }

        job = null;
        return false;
    }
}
