using UnityEngine;
using Invector.vCharacterController; // üëà –≤–æ—Ç —ç—Ç–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ

// –¢—Ä–µ–±—É–µ—Ç Invector TPC
public class InvectorCarrySpeedAdapter : MonoBehaviour
{
    [Header("Refs")]
    public PlayerCarryController carry;          // —Ç–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–µ—Ä–µ–Ω–æ—Å–∫–∏
    public vThirdPersonController invectorTPC;   // –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Invector –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ

    [Header("Tuning")]
    [Range(0.05f, 10f)] public float blendSpeed = 6f; // –Ω–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ –º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å

    float _currentMul = 1f;

    void Reset()
    {
        carry = GetComponent<PlayerCarryController>();
        invectorTPC = GetComponent<vThirdPersonController>();
    }

    void Update()
    {
        if (!invectorTPC || !carry) return;

        // –µ—Å–ª–∏ –Ω–µ—Å—ë–º ‚Äî –±–µ—Ä—ë–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ CarryGrip.moveSpeedMul, –∏–Ω–∞—á–µ 1
        float target = carry.IsCarrying ? Mathf.Clamp(carry.currentMoveMul, 0.1f, 2f) : 1f;

        // —Å–≥–ª–∞–∂–∏–≤–∞–µ–º (–ø—Ä–∏—è—Ç–Ω–µ–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        _currentMul = Mathf.Lerp(_currentMul, target, Time.deltaTime * blendSpeed);

        // –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ Invector
        invectorTPC.speedMultiplier = _currentMul; // –ø–æ–ª–µ –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ "Speed Multiplier—ã"
    }
}
